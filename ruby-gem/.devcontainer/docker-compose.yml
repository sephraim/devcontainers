# NOTE This will take precedence over docker-compose.yml in the project root

services:
  # Update this to the name of the service you want to work with in your docker-compose.yml file
  app:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    image: &project_name my-cool-gem # TODO: CHANGE THIS TO YOUR GEM NAME
    container_name: *project_name
    env_file: .env
    environment:
      - SOLARGRAPH_GLOBAL_CONFIG=/root/.config/solargraph/config.yml
      - SOLARGRAPH_CACHE=/root/.cache/solargraph
    volumes:
       - ..:/app
       - /app/pkg # don't mount the pkg directory, it will be created by the build
       - ${HOME}/.config:/root/.config # mount local config, specifically for solargraph
       - ${HOME}/.cache:/root/.cache # mount local cache, specifically for solargraph
    command: ["tail", "-f", "/dev/null"]

    # Uncomment if you want to override the service's Dockerfile to one in the .devcontainer
    # folder. Note that the path of the Dockerfile and context is relative to the *primary*
    # docker-compose.yml file (the first in the devcontainer.json "dockerComposeFile"
    # array). The sample below assumes your primary file is in the root of your project.
    #
    # build:
    #   context: .
    #   dockerfile: .devcontainer/Dockerfile

    # volumes:
    #   # Update this to wherever you want VS Code to mount the folder of your project
    #   - ..:/workspaces:cached

    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    # cap_add:
    #   - SYS_PTRACE
    # security_opt:
    #   - seccomp:unconfined

    # Overrides default command so things don't shut down after the process ends.
    # command: /bin/sh -c "while sleep 1000; do :; done"
